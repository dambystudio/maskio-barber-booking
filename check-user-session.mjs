import 'dotenv/config';
import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.DATABASE_URL);

async function checkUserSession() {
  console.log('üîç VERIFICA STATO UTENTE E SESSIONE');
  console.log('===================================\n');

  try {
    const testEmail = 'prova@gmail.com';
    
    // 1. Verifica stato nel database
    console.log('üìä 1. STATO NEL DATABASE:');
    const dbUser = await sql`
      SELECT id, name, email, role, phone, created_at, "emailVerified"
      FROM users 
      WHERE email = ${testEmail}
    `;

    if (dbUser.length === 0) {
      console.log('‚ùå Utente non trovato nel database!');
      return;
    }

    const user = dbUser[0];
    console.log(`   üë§ Nome: ${user.name}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üè∑Ô∏è Ruolo DB: ${user.role}`);
    console.log(`   üì± Telefono: ${user.phone}`);
    console.log(`   ‚úÖ Email verificata: ${user.emailVerified ? 'S√å' : 'NO'}`);
    console.log(`   üìÖ Creato: ${user.created_at}`);

    // 2. Verifica configurazione variabili d'ambiente
    console.log('\n‚öôÔ∏è 2. CONFIGURAZIONE VARIABILI D\'AMBIENTE:');
    const barberEmails = process.env.BARBER_EMAILS?.split(',').map(email => email.trim()) || [];
    const adminEmails = process.env.ADMIN_EMAILS?.split(',').map(email => email.trim()) || [];
    
    console.log(`   üìß BARBER_EMAILS: "${process.env.BARBER_EMAILS || 'NON DEFINITA'}"`);
    console.log(`   üëë ADMIN_EMAILS: "${process.env.ADMIN_EMAILS || 'NON DEFINITA'}"`);
    console.log(`   üßî Email in BARBER_EMAILS: ${barberEmails.includes(testEmail) ? 'S√å' : 'NO'}`);
    console.log(`   üëë Email in ADMIN_EMAILS: ${adminEmails.includes(testEmail) ? 'S√å' : 'NO'}`);

    // 3. Simula logica di determinazione ruolo (come fa auth.ts)
    console.log('\nüéØ 3. LOGICA DETERMINAZIONE RUOLO:');
    const isBarber = barberEmails.includes(testEmail);
    const isAdmin = adminEmails.includes(testEmail);
    
    let expectedRole = 'customer'; // default
    if (isAdmin) {
      expectedRole = 'admin';
    } else if (isBarber) {
      expectedRole = 'barber';
    }

    console.log(`   üé≤ Ruolo atteso da variabili d'ambiente: ${expectedRole}`);
    console.log(`   üíæ Ruolo attuale nel DB: ${user.role}`);
    console.log(`   ‚öñÔ∏è Corrispondenza: ${expectedRole === user.role ? '‚úÖ S√å' : '‚ùå NO'}`);

    // 4. Raccomandazioni
    console.log('\nüí° 4. DIAGNOSI E SOLUZIONI:');
    
    if (user.role === 'barber' && !isBarber) {
      console.log('   ‚ö†Ô∏è PROBLEMA IDENTIFICATO:');
      console.log('   ‚Ä¢ Il ruolo nel DB √® "barber"');
      console.log('   ‚Ä¢ Ma l\'email NON √® nelle variabili d\'ambiente BARBER_EMAILS');
      console.log('   ‚Ä¢ Il sistema auth.ts sovrascriver√† il ruolo a "customer"');
      console.log('');
      console.log('   üîß SOLUZIONI:');
      console.log('   A) Aggiungi prova@gmail.com a BARBER_EMAILS in .env.local');
      console.log('   B) Oppure modifica auth.ts per non sovrascrivere ruoli esistenti');
      console.log('');
      console.log('   üìù Per soluzione A, aggiungi a .env.local:');
      console.log(`   BARBER_EMAILS="${barberEmails.length > 0 ? barberEmails.join(',') + ',' : ''}prova@gmail.com"`);
    } else if (user.role === 'barber' && isBarber) {
      console.log('   ‚úÖ CONFIGURAZIONE CORRETTA:');
      console.log('   ‚Ä¢ Ruolo nel DB: barber');
      console.log('   ‚Ä¢ Email in BARBER_EMAILS: S√å');
      console.log('   ‚Ä¢ Il problema potrebbe essere cache della sessione');
      console.log('');
      console.log('   üîß PROVA:');
      console.log('   1. Logout completo');
      console.log('   2. Chiudi browser');
      console.log('   3. Riapri e fai login di nuovo');
    } else {
      console.log('   üìã Stato normale - account cliente');
    }

    // 5. Test API di debug
    console.log('\nüß™ 5. SUGGERIMENTI DI TEST:');
    console.log('   ‚Ä¢ Fai logout e login di nuovo');
    console.log('   ‚Ä¢ Controlla /api/debug/check-permissions dopo login');
    console.log('   ‚Ä¢ Verifica console browser per errori durante login');

  } catch (error) {
    console.error('\n‚ùå ERRORE DURANTE LA VERIFICA:', error);
  }
}

// Esegui la funzione
checkUserSession().catch(console.error); 