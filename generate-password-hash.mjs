import bcrypt from 'bcryptjs';

async function generatePasswordHash() {
  console.log('üîê GENERAZIONE HASH PASSWORD TEMPORANEA');
  console.log('======================================\n');

  const temporaryPassword = 'ziopera';
  
  try {
    // Genera l'hash con lo stesso round usato dall'app (12)
    const hash = await bcrypt.hash(temporaryPassword, 12);
    
    console.log('üìù Password da hashare:', temporaryPassword);
    console.log('üîí Hash generato:', hash);
    console.log('');
    console.log('üìã ISTRUZIONI:');
    console.log('1. Copia l\'hash generato');
    console.log('2. Aggiorna il campo "password" nel database con questo hash');
    console.log('3. L\'utente potr√† loggarsi con password "ziopera"');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANTE:');
    console.log('‚Ä¢ La password originale sar√† PERSA per sempre');
    console.log('‚Ä¢ Se vuoi ripristinarla, devi conoscere la password originale in plain text');
    console.log('‚Ä¢ L\'hash originale non pu√≤ essere "decrittato"');
    
    // Test del hash
    console.log('\nüß™ TEST HASH:');
    const isValid = await bcrypt.compare(temporaryPassword, hash);
    console.log(`‚úÖ Il hash √® valido: ${isValid}`);
    
  } catch (error) {
    console.error('‚ùå Errore nella generazione hash:', error);
  }
}

// Esegui la funzione
generatePasswordHash().catch(console.error); 