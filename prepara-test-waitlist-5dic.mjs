import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const sql = neon(process.env.DATABASE_URL);

async function preparaTest5Dicembre() {
  console.log('üîç Preparazione Test Notifiche - 5 Dicembre 2025\n');
  console.log('='.repeat(70) + '\n');

  const testDate = '2025-12-05';
  const barberId = 'michele';
  const barberName = 'Michele';

  try {
    // 1. VERIFICA STATO ATTUALE
    console.log('1Ô∏è‚É£ VERIFICA STATO ATTUALE\n');
    
    const existingBookings = await sql`
      SELECT id, time, customer_name, status, service
      FROM bookings
      WHERE date = ${testDate}
      AND barber_id = ${barberId}
      ORDER BY time
    `;

    console.log(`üìÖ 5 Dicembre 2025 - ${barberName}`);
    console.log(`   Prenotazioni esistenti: ${existingBookings.length}\n`);

    if (existingBookings.length > 0) {
      console.log('   Dettaglio:');
      existingBookings.forEach(b => {
        console.log(`   - ${b.time}: ${b.customer_name} - ${b.service} (${b.status})`);
      });
      console.log('');
    }

    // 2. SLOT DA RIEMPIRE
    const timeSlots = [
      '09:00', '09:30', '10:00', '10:30',
      '11:00', '11:30', '12:00', '12:30',
      '14:00', '14:30', '15:00', '15:30',
      '16:00', '16:30', '17:00', '17:30'
    ];

    const testClients = [
      'Mario Rossi', 'Luigi Bianchi', 'Giovanni Verdi', 'Giuseppe Neri',
      'Paolo Gialli', 'Andrea Blu', 'Francesco Rosa', 'Alessandro Viola',
      'Matteo Marrone', 'Davide Azzurri', 'Simone Grigi', 'Luca Bianchi',
      'Marco Arancio', 'Stefano Celeste', 'Riccardo Verde', 'Fabio Rosso'
    ];

    console.log('2Ô∏è‚É£ CANCELLAZIONE PRENOTAZIONI ESISTENTI\n');
    
    if (existingBookings.length > 0) {
      await sql`
        DELETE FROM bookings 
        WHERE date = ${testDate} 
        AND barber_id = ${barberId}
      `;
      console.log(`   ‚úÖ Cancellate ${existingBookings.length} prenotazioni\n`);
    } else {
      console.log('   ‚úÖ Nessuna prenotazione da cancellare\n');
    }

    // 3. CREAZIONE PRENOTAZIONI
    console.log('3Ô∏è‚É£ CREAZIONE NUOVE PRENOTAZIONI\n');
    console.log(`   Target: ${timeSlots.length} slot dalle ${timeSlots[0]} alle ${timeSlots[timeSlots.length - 1]}\n`);

    let created = 0;
    for (let i = 0; i < timeSlots.length; i++) {
      const time = timeSlots[i];
      const clientName = testClients[i];

      try {
        await sql`
          INSERT INTO bookings (
            customer_name,
            customer_email,
            customer_phone,
            date,
            time,
            barber_id,
            barber_name,
            service,
            price,
            duration,
            status,
            notes
          ) VALUES (
            ${clientName},
            ${`test${i + 1}@waitlist.test`},
            ${`+39333${String(i + 1).padStart(7, '0')}`},
            ${testDate},
            ${time},
            ${barberId},
            ${barberName},
            'Taglio Base',
            20.00,
            30,
            'confirmed',
            'TEST WAITLIST - Prenotazione automatica per test notifiche'
          )
        `;
        
        console.log(`   ‚úÖ ${time} - ${clientName}`);
        created++;
      } catch (error) {
        console.log(`   ‚ùå ${time} - ERRORE: ${error.message}`);
      }
    }

    console.log(`\n   üìä Risultato: ${created}/${timeSlots.length} prenotazioni create\n`);

    // 4. VERIFICA FINALE
    console.log('4Ô∏è‚É£ VERIFICA FINALE DATABASE\n');
    
    const finalBookings = await sql`
      SELECT time, customer_name, status, service, price
      FROM bookings
      WHERE date = ${testDate}
      AND barber_id = ${barberId}
      ORDER BY time
    `;

    console.log(`   üìã Prenotazioni nel database: ${finalBookings.length}\n`);

    if (finalBookings.length > 0) {
      console.log('   Elenco completo:');
      finalBookings.forEach((b, i) => {
        console.log(`   ${String(i + 1).padStart(2, ' ')}. ${b.time} - ${b.customer_name.padEnd(20)} - ${b.service} (‚Ç¨${b.price})`);
      });
      console.log('');
    }

    // 5. CONTROLLA SLOT LIBERI
    const bookedTimes = finalBookings.map(b => b.time);
    const missingSlots = timeSlots.filter(slot => !bookedTimes.includes(slot));

    if (missingSlots.length > 0) {
      console.log(`   ‚ö†Ô∏è  Slot ancora liberi: ${missingSlots.join(', ')}\n`);
    } else {
      console.log(`   ‚úÖ Tutti i ${timeSlots.length} slot sono OCCUPATI!\n`);
    }

    // 6. RIEPILOGO FINALE
    console.log('='.repeat(70));
    console.log('üéØ STATO FINALE TEST');
    console.log('='.repeat(70) + '\n');

    if (finalBookings.length >= 10) {
      console.log('‚úÖ TEST PRONTO!\n');
      console.log(`üìÖ Data: 5 Dicembre 2025 (Venerd√¨)`);
      console.log(`üë®‚Äçüíº Barbiere: ${barberName}`);
      console.log(`üìä Prenotazioni: ${finalBookings.length}/${timeSlots.length} slot occupati`);
      console.log(`üîí Stato: ${missingSlots.length === 0 ? 'COMPLETAMENTE PIENO' : `${missingSlots.length} slot ancora disponibili`}\n`);
      
      console.log('üì± PROSSIMI PASSI:\n');
      console.log('   1Ô∏è‚É£  Apri la PWA sul telefono');
      console.log('   2Ô∏è‚É£  Vai su "Prenota" ‚Üí Michele ‚Üí 5 Dicembre');
      console.log('   3Ô∏è‚É£  Verifica che appaia "Nessun orario disponibile"');
      console.log('   4Ô∏è‚É£  Clicca "üìã Lista d\'attesa"');
      console.log('   5Ô∏è‚É£  Iscriviti alla waitlist per questo giorno');
      console.log('   6Ô∏è‚É£  Torna qui e dimmi quando sei iscritto\n');
      
      console.log('üîî TEST NOTIFICA:\n');
      console.log('   Dopo l\'iscrizione, canceller√≤ una prenotazione e dovresti');
      console.log('   ricevere una notifica push sul telefono!\n');

    } else {
      console.log('‚ö†Ô∏è  ATTENZIONE: Test non completamente pronto\n');
      console.log(`   Solo ${finalBookings.length}/${timeSlots.length} slot prenotati`);
      console.log('   Potrebbero esserci ancora slot disponibili\n');
    }

  } catch (error) {
    console.error('‚ùå ERRORE:', error.message);
    console.error(error.stack);
  }
}

preparaTest5Dicembre();
